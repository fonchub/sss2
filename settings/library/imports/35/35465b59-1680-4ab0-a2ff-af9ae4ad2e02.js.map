{"version":3,"sources":["..\\..\\..\\..\\..\\..\\assets\\resources\\script\\business/assets\\resources\\script\\business\\GameTimer.js"],"names":["cc","Class","extends","Component","properties","onLoad","runtimer","source","timernode","atlas","timer_first","timer_sec","times","self","remaining","string","active","timersrc","unschedule","schedule","stoptimer","timer","unscheduleAllCallbacks"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVQ,KAHP;;AAgBL;AACAC,YAAQ,kBAAY,CACnB,CAlBI;AAmBL;;;;;;;;AAQAC,cAAS,kBAASC,MAAT,EAAkBC,SAAlB,EAA+BC,KAA/B,EAAsCC,WAAtC,EAAoDC,SAApD,EAAgEC,KAAhE,EAAsE;;AAE3E,YAAIC,OAAO,IAAX;AACA,aAAKC,SAAL,GAAiBF,KAAjB;AACAF,oBAAYK,MAAZ,GAAqBH,KAArB;AACA,YAAGJ,SAAH,EAAa;AACTA,sBAAUQ,MAAV,GAAmB,IAAnB;AACH;;AAED,aAAKC,QAAL,GAAgB,YAAW;AACvBJ,iBAAKC,SAAL,GAAiBD,KAAKC,SAAL,GAAiB,CAAlC;AACA,gBAAGD,KAAKC,SAAL,GAAiB,CAApB,EAAsB;AAClBP,uBAAOW,UAAP,CAAkB,IAAlB;AACAV,0BAAUQ,MAAV,GAAmB,KAAnB;AACH,aAHD,MAGK;AACDN,4BAAYK,MAAZ,GAAqBF,KAAKC,SAA1B;AACH;AACJ,SARD;AASAP,eAAOY,QAAP,CAAgB,KAAKF,QAArB,EAA+B,CAA/B,EAAmCL,KAAnC,EAA2C,CAA3C;;AAEA,eAAO,KAAKK,QAAZ;AACH,KAhDI;AAiDLG,eAAU,mBAASb,MAAT,EAAkBC,SAAlB,EAA8Ba,KAA9B,EAAoC;AAC1C,YAAGb,SAAH,EAAa;AACTA,sBAAUQ,MAAV,GAAmB,KAAnB;AACH;AACD,YAAIH,OAAO,IAAX;AACA,aAAKC,SAAL,GAAiB,CAAjB;AACA,YAAGO,KAAH,EAAS;AACLd,mBAAOe,sBAAP;AACH;AACJ;;AAED;AACA;;AAEA;AA/DK,CAAT","file":"GameTimer.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\resources\\script\\business","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n    },\n\n    // use this for initialization\n    onLoad: function () {\n    },\n    /**\n     * @param self              调用的源\n     * @param timernode         计时器所在的节点\n     * @param atlas             计时器图集\n     * @param timer_first       计时器首个计时字母\n     * @param timer_sec         计时器第二个数字\n     * @param times             计时器执行次数\n     */\n    runtimer:function(source , timernode  , atlas, timer_first , timer_sec , times){\n\n        let self = this ;\n        this.remaining = times ;\n        timer_first.string = times ;\n        if(timernode){\n            timernode.active = true ;\n        }\n\n        this.timersrc = function() {\n            self.remaining = self.remaining - 1 ;\n            if(self.remaining < 0){\n                source.unschedule(this);\n                timernode.active = false ;\n            }else{\n                timer_first.string = self.remaining  ;\n            }\n        } ;\n        source.schedule(this.timersrc, 1 , times , 0);\n\n        return this.timersrc ;\n    },\n    stoptimer:function(source , timernode , timer){\n        if(timernode){\n            timernode.active = false ;\n        }\n        let self = this ;\n        this.remaining = 0;\n        if(timer){\n            source.unscheduleAllCallbacks();\n        }\n    }\n\n    // called every frame, uncomment this function to activate update callback\n    // update: function (dt) {\n\n    // },\n});\n"]}