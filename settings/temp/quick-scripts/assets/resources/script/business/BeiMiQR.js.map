{"version":3,"sources":["BeiMiQR.js"],"names":["beiMiCommon","require","cc","Class","extends","properties","qrgraphics","default","type","Node","roomid","Label","onLoad","init","data","string","qrcode","QRCode","QRErrorCorrectLevel","H","addData","make","size","width","num","getModuleCount","ctx","getComponent","Graphics","clear","fillColor","Color","BLACK","tileW","tileH","row","col","isDark","w","Math","ceil","floor","h","rect","round","fill"],"mappings":";;;;;;AAAA,IAAIA,cAAcC,QAAQ,aAAR,CAAlB;AACAC,GAAGC,KAAH,CAAS;AACRC,aAASJ,WADD;;AAGRK,gBAAY;AACLC,oBAAW;AACPC,qBAAU,IADH;AAEPC,kBAAON,GAAGO;AAFH,SADN;AAKLC,gBAAO;AACHH,qBAAU,IADP;AAEHC,kBAAON,GAAGS;AAFP;AALF,KAHJ;;AAcR;AACAC,YAAQ,kBAAW,CAElB,CAjBO;AAkBLC,UAAK,cAASC,IAAT,EAAc;AAClB,YAAGA,QAAM,IAAN,IAAcA,QAAQ,EAAzB,EAA4B;AACxB,iBAAKJ,MAAL,CAAYK,MAAZ,GAAqB,mBAAiBD,IAAtC;AACA;AACD,YAAIE,SAAS,IAAIC,MAAJ,CAAW,CAAX,EAAcC,oBAAoBC,CAAlC,CAAb;AACAH,eAAOI,OAAP,CAAeN,IAAf;;AAEAE,eAAOK,IAAP;;AAEA,YAAIC,OAAO,KAAKhB,UAAL,CAAgBiB,KAA3B;AACA,YAAIC,MAAMR,OAAOS,cAAP,EAAV;AACA,YAAIC,MAAM,KAAKpB,UAAL,CAAgBqB,YAAhB,CAA6BzB,GAAG0B,QAAhC,CAAV;AACAF,YAAIG,KAAJ;AACAH,YAAII,SAAJ,GAAgB5B,GAAG6B,KAAH,CAASC,KAAzB;AACA;AACA,YAAIC,QAAQX,OAAOE,GAAnB;AACA,YAAIU,QAAQZ,OAAOE,GAAnB;AACA;AACA,aAAK,IAAIW,MAAM,CAAf,EAAkBA,MAAMX,GAAxB,EAA6BW,KAA7B,EAAoC;AAChC,iBAAK,IAAIC,MAAM,CAAf,EAAkBA,MAAMZ,GAAxB,EAA6BY,KAA7B,EAAoC;AAChC,oBAAIpB,OAAOqB,MAAP,CAAcF,GAAd,EAAmBC,GAAnB,CAAJ,EAA6B;AACzB;AACA;AACA,wBAAIE,IAAKC,KAAKC,IAAL,CAAU,CAACJ,MAAM,CAAP,IAAYH,KAAtB,IAA+BM,KAAKE,KAAL,CAAWL,MAAMH,KAAjB,CAAxC;AACA,wBAAIS,IAAKH,KAAKC,IAAL,CAAU,CAACL,MAAM,CAAP,IAAYF,KAAtB,IAA+BM,KAAKE,KAAL,CAAWN,MAAMF,KAAjB,CAAxC;AACAP,wBAAIiB,IAAJ,CAASJ,KAAKK,KAAL,CAAWR,MAAMH,KAAjB,CAAT,EAAkCX,OAAOY,KAAP,GAAeK,KAAKK,KAAL,CAAWT,MAAMD,KAAjB,CAAjD,EAA0EI,CAA1E,EAA6EI,CAA7E;AACAhB,wBAAImB,IAAJ;AACH,iBAPD,MAOO,CAEN;AADG;;AAEJ;AACA;AACA;AACA;AACH;AACJ;AACJ;AAtDI,CAAT","file":"BeiMiQR.js","sourceRoot":"..\\..\\..\\..\\..\\..\\assets\\resources\\script\\business","sourcesContent":["var beiMiCommon = require(\"BeiMiCommon\");\ncc.Class({\n\textends: beiMiCommon,\n\n\tproperties: {\n        qrgraphics:{\n            default : null ,\n            type : cc.Node\n        },\n        roomid:{\n            default : null ,\n            type : cc.Label\n        }\n\t},\n\n\t// use this for initialization\n\tonLoad: function() {\n\n\t},\n    init:function(data){\n\t    if(data!=null && data != \"\"){\n\t        this.roomid.string = \"让好友扫描加入房间，房间号：\"+data ;\n        }\n        var qrcode = new QRCode(6, QRErrorCorrectLevel.H);\n        qrcode.addData(data);\n\n        qrcode.make();\n\n        let size = this.qrgraphics.width;\n        let num = qrcode.getModuleCount();\n        var ctx = this.qrgraphics.getComponent(cc.Graphics);\n        ctx.clear();\n        ctx.fillColor = cc.Color.BLACK;\n        // compute tileW/tileH based on node width and height\n        var tileW = size / num;\n        var tileH = size / num;\n        // draw in the Graphics\n        for (var row = 0; row < num; row++) {\n            for (var col = 0; col < num; col++) {\n                if (qrcode.isDark(row, col)) {\n                    // cc.log(row, col)\n                    // ctx.fillColor = cc.Color.BLACK;\n                    var w = (Math.ceil((col + 1) * tileW) - Math.floor(col * tileW));\n                    var h = (Math.ceil((row + 1) * tileW) - Math.floor(row * tileW));\n                    ctx.rect(Math.round(col * tileW), size - tileH - Math.round(row * tileH), w, h);\n                    ctx.fill();\n                } else {\n                    // ctx.fillColor = cc.Color.WHITE;\n                }\n                // var w = (Math.ceil((col + 1) * tileW) - Math.floor(col * tileW));\n                // var h = (Math.ceil((row + 1) * tileW) - Math.floor(row * tileW));\n                // ctx.rect(Math.round(col * tileW), Math.round(row * tileH), w, h);\n                // ctx.fill();\n            }\n        }\n    }\n});"]}